#!/usr/bin/env ruby

require "yaml"
require "optparse"
require "metanorma"
require "uuidtools"
require "uri"

def uuid()
  UUIDTools::UUID.random_create
end

def extract_documents(m)
  return [] unless m and m["sections"]
  ret = []
  m["sections"].each do |s|
    ret << s if s["file"]
    ret << extract_documents(s) if s["sections"]
  end
  ret.flatten
end

def hyperlink(link, suffix)
  return unless link
  link.sub(/\.adoc(?=$|#)/, ".#{suffix}")
end

def iterate(sections, options)
  return "" unless sections
  ret = ""
  Array(sections).each do |m|
    datetype = m["stage"]&.casecmp("published") == 0 ? "published" : "updated"
    ret += "<relation type='partOf'>"
    ret += m["file"] ? "<bibdata type='#{m['type']}'>\n" : "<relaton-collection type='#{m['type']}'>\n"
    ret += "<title>#{m['title']}</title>\n"
    ret += "<uri>#{m['file']}</uri>\n"
    ret += "<docidentifier>#{m['number']}</docidentifier>\n"
    ret += "<date type='#{datetype}'><on>#{m['revdate']}</on></date>\n" if m['revdate']
    ret += "<abstract>#{m['description']}</abstract>\n" if m["description"]
    ret += "<status>#{m['stage']}</status>\n" if m["stage"]
    ret += iterate(m["sections"], options)
    ret += "<technical-committee>#{m['tc']}</technical-committee>\n" if m["tc"]
    ret += m["file"] ? "</bibdata>\n" : "</relaton-collection>\n"
    ret += "</relation>\n"
  end
  ret
end

options = {}

opt_parser = OptionParser.new do |opts|
  opts.banner += " <file>"
  opts.on(
    '-t',
    '--type TYPE',
    "Type of standard to generate"
  ) { |v| options[:type] = v.to_sym }

  opts.on(
    '-r',
    '--require LIBRARY',
    'Require LIBRARY prior to execution'
  ) { |v|
    options[:require] ||= []
    options[:require] << v
  }

  opts.on(
    '-R dir',
    '--relaton',
    "Insert links to relaton XML, generated by relaton-server-csd, with root directory dir (/id/xxxx is supplied)"
  ) { |v| options[:relaton] = v }

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end
opt_parser.parse!(ARGV)
options[:filename] = ARGV.pop

if options[:require]
  options[:require].each do |r|
    require r
  end
end

manifest = YAML.load_file(options[:filename])

documents = extract_documents(manifest)

# TODO real lookup of namespaces and root elements

out = <<~END
<relaton-collection xmlns="http://riboseinc.com/isoxml">
  <title>#{manifest["title"]}</title>
END

out+=iterate(manifest["sections"], options)

out+= <<~END
</relaton-collection>
END

outfilename = options[:filename].sub(/\.[^.]+$/, ".xml")
File.open(outfilename, "w") { |f| f.write out }
cmd = "#{File.dirname(__FILE__)}/relaton-doc #{outfilename} #{ manifest["htmlstylesheet"] || '""' } #{ options[:relaton] || '""' }"
system cmd

#processor = registry.find_processor(options[:type].to_sym)
#ext = :html
#file_extension = "html" || processor.output_formats[ext] 
#outfilename = options[:filename].sub(/\.[^.]+$/, ".#{file_extension}")
#isodoc_options = { suppressheadingnumbers: true }
#isodoc_options[:htmlstylesheet] = manifest["htmlstylesheet"] if manifest["htmlstylesheet"]
#processor.output(out, outfilename, ext, isodoc_options)
